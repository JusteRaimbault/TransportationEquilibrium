for(i in unique(com$membership)){show(i);show(V(g)$name[which(com$membership==i)])}
kmax = 1020  # max for common ggiant is 1088
edge_th = 200  # 6218
d=degree(ggiant)
gg=induced_subgraph(ggiant,which(d>kmin&d<kmax))
gg=subgraph.edges(gg,which(E(gg)$weight>edge_th))
com = cluster_louvain(gg)
com
for(i in unique(com$membership)){show(i);show(V(g)$name[which(com$membership==i)])}
for(i in unique(com$membership)){show(i);show(V(gg)$name[which(com$membership==i)])}
kmax = 1000  # max for common ggiant is 1088
edge_th = 200  # 6218
d=degree(ggiant)
gg=induced_subgraph(ggiant,which(d>kmin&d<kmax))
gg=subgraph.edges(gg,which(E(gg)$weight>edge_th))
com = cluster_louvain(gg)
com
for(i in unique(com$membership)){show(i);show(V(gg)$name[which(com$membership==i)])}
thematics = list()
for(i in 1:length(V(gg))){
thematics[[V(g)$name[i]]]=com$membership[i]
}
# compute proba matrix
them_probas = matrix(0,length(names(keyword_dico)),length(unique(com$membership)))
for(i in 1:length(names(keyword_dico))){
if(i%%100==0){show(i)}
kwcount=0
for(kw in keyword_dico[[names(keyword_dico)[i]]]){if(kw %in% names(thematics)){
j=thematics[[kw]]
them_probas[i,j]=them_probas[i,j]+1;kwcount=kwcount+1
}}
if(kwcount>0){them_probas[i,]=them_probas[i,]/kwcount}
}
# number of articles with originality
#length(which(rowSums(them_probas)>0))
originalities=apply(them_probas,MARGIN = 1,FUN = function(r){if(sum(r)==0){return(0)}else{return(1 - sum(r^2))}})
cybindexes = c();cybresnames = c();iscyb=rep(FALSE,length(originalities))
for(cyb in cybnames){
indexes = which(names(keyword_dico)==cyb);
if(length(indexes)>0){
cybindexes=append(cybindexes,indexes[1]);
cybresnames=append(cybresnames,cyb)
iscyb[indexes[1]]=TRUE
}}
ggplot(data.frame(orig=originalities,cyb=iscyb), aes(x=orig, fill=cyb)) + geom_density(alpha=.3)
library(ggplot2)
ggplot(data.frame(orig=originalities,cyb=iscyb), aes(x=orig, fill=cyb)) + geom_density(alpha=.3)
length(which(iscyb))
sdat=as.tbl(dat)%>%group_by(iscyb)%>%summarise(mean=mean(orig))
dat=data.frame(orig=originalities,cyb=iscyb)
sdat=as.tbl(dat)%>%group_by(iscyb)%>%summarise(mean=mean(orig))
sdat=as.tbl(dat)%>%group_by(cyb)%>%summarise(mean=mean(orig))
length(which(iscyb))
dat=data.frame(orig=originalities,cyb=iscyb)
sdat=as.tbl(dat)%>%group_by(cyb)%>%summarise(mean=mean(orig))
library(ggplot2)
g=ggplot(dat, aes(x=orig, fill=cyb))
g+ geom_density(alpha=.3)+geom_vline(data=sdat, aes(xintercept=mean,  colour=cyb),
linetype="dashed", size=1)
sdat
dat
as.tbl(dat)%>%group_by(cyb)
g=ggplot(dat, aes(x=orig, fill=cyb))
g+ geom_density(alpha=.3)
cybprobas = them_probas[cybindexes,]
cybcumprobas = colSums(cybprobas)/length(which(rowSums(cybprobas)>0))
1 - sum(cybcumprobas^2)
sdat
Nb = 10000
nulljournalorigs=c()
for(i in 1:Nb){
probas = them_probas[sample.int(nrow(them_probas), size = length(cybindexes), replace = FALSE),]
cumprobas = colSums(probas)/length(which(rowSums(probas)>0))
nulljournalorigs=append(nulljournalorigs,1 - sum(cumprobas^2))
}
hist(nulljournalorigs,breaks=1000)
mean(nulljournalorigs)
head(them_probas)
i=1
neighbors(gcitation,v=cybnodes[i],mode="in")$name
gcitation
cybnodes
cybnodes=V(gcitation)[V(gcitation)$cyb==1]
cybnodes
neighbors(gcitation,v=cybnodes[i],mode="in")$name
keyword_dico[[neighbors(gcitation,v=cybnodes[i],mode="in")$name]]
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in cybindexes){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico==neigh[n]))
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
## second order originality ?
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico==neigh[n]))
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
show(neigh)
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico==neigh[n]))
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
show(neigh)
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico)==neigh[n])
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
cybsecorigout=c()
#cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="out")$name
show(neigh)
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico)==neigh[n])
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigout=append(cybsecorigout,1-sum(probas^2))}
}
dat = data.frame(orig=c(cybsecorigin,cybsecorigout),type=c(rep("in",length(cybsecorigin),rep("out",length(cybsecorigout)))
)
)
c(cybsecorigin,cybsecorigout)
dat = data.frame(orig=c(cybsecorigin,cybsecorigout),type=c(rep("in",length(cybsecorigin)),rep("out",length(cybsecorigout)))
)
dat
g=ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)
ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)
sdat=as.tbl(dat)%>%group_by(type)%>%summarise(mean=mean(orig))
ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)+geom_vline(data=sdat, aes(xintercept=mean,  colour=cyb),linetype="dashed", size=1)
ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)+geom_vline(data=sdat, aes(xintercept=mean,  colour=type),linetype="dashed", size=1)
is.numeric("12")
as.numeric("12")
as.numeric("12mph")
is.numeric(as.numeric("12mph"))
gsub(x = "30 mph"," ","")
s=gsub(x = "30 mph"," ","")
s=gsub(x = s," ","")
s
sr=gsub(x = s," ","")
normalizedSpeed <- function(s){
if(!is.na(as.numeric(s))){return(as.numeric(s))}
sr=gsub(x = s," ","")
if(grepl("mph",sr)){return(as.numeric(gsub(x = sr,"mph",""))*1.609)}
else{return(NA)}
}
normalizedSpeed("30 mph")
normalizedSpeed("30mph")
normalizedSpeed("30")
normalizedSpeed(30)
raw <- raster(paste0(Sys.getenv("CN_HOME"),"/Data/PopulationDensity/raw/density_wgs84.tif"))
library(raster)
raw <- raster(paste0(Sys.getenv("CN_HOME"),"/Data/PopulationDensity/raw/density_wgs84.tif"))
raw
xyFromCell()
xyFromCell
xyFromCell(raw,1230)
library(RPostgreSQL)
library(rgeos)
con = dbConnect(dbDriver("PostgreSQL"), dbname="osm_simpl",user="Juste",host="localhost" )
query = dbSendQuery(con,"SELECT ST_AsText(geography) AS geom FROM links;")
data = fetch(query,n=-1)
geoms = data$geom
roads=list()
for(i in 1:length(geoms)){
r=readWKT(geoms[i])@lines[[1]];r@ID=as.character(i)
roads[[i]]=r
}
splines = SpatialLines(LinesList = roads)
plot(splines)
library(igraph)
help("difference")
real_raw = read.csv(
paste0(Sys.getenv("CN_HOME"),'/Results/Morphology/Density/Numeric/20150806_europe50km_10kmoffset_100x100grid.csv'),
sep=";"
)
real =real_raw[!is.na(real_raw[,3])&!is.na(real_raw[,4])&!is.na(real_raw[,5])&!is.na(real_raw[,6])&!is.na(real_raw[,7])&!is.na(real_raw[,8])&!is.na(real_raw[,9]),]
for(j in 1:ncol(real)){real[,j]=(real[,j]-min(real[,j]))/(max(real[,j])-min(real[,j]))}
library(RColorBrewer)
library(ggplot2)
library(MASS)
source(paste0(Sys.getenv('CN_HOME'),'/Models/Utils/R/plots.R'))
real_raw = read.csv(
paste0(Sys.getenv("CN_HOME"),'/Results/Morphology/Density/Numeric/20150806_europe50km_10kmoffset_100x100grid.csv'),
sep=";"
)
real =real_raw[!is.na(real_raw[,3])&!is.na(real_raw[,4])&!is.na(real_raw[,5])&!is.na(real_raw[,6])&!is.na(real_raw[,7])&!is.na(real_raw[,8])&!is.na(real_raw[,9]),]
real_ind = real[5*(0:(nrow(real)/5))+1,]
names(real)
indic="moran"
p = ggplot(data.frame(x=real$y,y=1-real$x,density_max=real[[indic]]),aes(x=x,y=y,colour=density_max))
p+geom_point()+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
indic="distance"
p = ggplot(data.frame(x=real$y,y=1-real$x,density_max=real[[indic]]),aes(x=x,y=y,colour=density_max))
p+geom_point()+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
map<-function(indic){
d=data.frame(x=real$y,y=1-real$x);d[[indic]]=real[[indic]]
p=ggplot(d,aes_string(x="x",y="y",colour=indic))
p+geom_point(shape=".",size=2)+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
}
# multiplots
indics=c("moran","distance","entropy","slope")
plots=list();k=1
for(indic in indics){
plots[[k]]=map(indic)
k=k+1
}
multiplot(plotlist=plots,cols=2)
map<-function(indic){
d=data.frame(x=real$y,y=1-real$x);d[[indic]]=real[[indic]]
p=ggplot(d,aes_string(x="x",y="y",colour=indic))
p+geom_point(shape=".",size=1)+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
}
# multiplots
indics=c("moran","distance","entropy","slope")
plots=list();k=1
for(indic in indics){
plots[[k]]=map(indic)
k=k+1
}
multiplot(plotlist=plots,cols=2)
names(real)
vars = c(3,4,5,6)
ccoef=c()
for(k in 2:15){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
ccoef=append(ccoef,clust$tot.withinss/clust$betweenss)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k),xlab="",ylab="",xaxt='n',yaxt='n')
}
ccoef
vars = c(3,4,5,6)
ccoef=c()
for(k in 2:15){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
ccoef=append(ccoef,clust$tot.withinss/(clust$betweenss+clust$tot.withinss))# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k),xlab="",ylab="",xaxt='n',yaxt='n')
}
ccoef
vars = c(3,4,5,6)
ccoef=c()
par(mfrow=c(3,3))
for(k in 2:11){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
withinProp=clust$tot.withinss/(clust$betweenss+clust$tot.withinss)
ccoef=append(ccoef,withinProp)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k,' ; withinProp=',withinProp),xlab="",ylab="",xaxt='n',yaxt='n')
}
vars = c(3,4,5,6)
ccoef=c()
par(mfrow=c(3,3))
for(k in 3:11){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
withinProp=clust$tot.withinss/(clust$betweenss+clust$tot.withinss)
ccoef=append(ccoef,withinProp)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k,' ; withinProp=',withinProp),xlab="",ylab="",xaxt='n',yaxt='n')
}
shiny::runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/Cybergeo20')
help("forceNetwork")
setwd(paste0(Sys.getenv('CS_HOME'),'/TransportationEquilibrium/Models/Visu/shiny'))
library(RSQLite)
library(dplyr)
db = dbConnect(SQLite(),"../../../Data/Sytadin/data/sytadin_20160404.sqlite3")
dbGetQuery(db,"SELECT * FROM data LIMIT 10000");
data = dbGetQuery(db,"SELECT * FROM data LIMIT 10000");
data=as.tbl(data)
dtaa
data
unique(data$ts)
data$ts=floor(data$ts)
unique(data$ts)
67*200
data = dbGetQuery(db,"SELECT * FROM data LIMIT 100000");
data=as.tbl(data)
data$ts=floor(data$ts)
unqiue(data$ts)
unique(data$ts)
shiny::runApp()
times = unique(data$ts)
times
1454459042-1454458921
diff(times)
mintps = data %>% group_by(id) %>% summarise(mintps=max(1,min(tps)))
mintps
data$id = ((0:(nrow(data)-1))%%148)+1
mintps = data %>% group_by(id) %>% summarise(mintps=max(1,min(tps)))
mintps
as.POSIXct(times)
help("as.POSIXct.default")
as.POSIXct(times, as.POSIXct(tz = "GMT"))
as.POSIXct(times, origin = as.POSIXct(tz = "GMT"))
as.POSIXct(x = times, origin = as.POSIXct(tz = "GMT"))
as.POSIXct(x = times, tz = "GMT")
as.POSIXct(x = times, tz = "GMT",origin=0)
as.POSIXct(x = times, tz = "GMT",origin=as.POSIXct(0,tz="GMT"))
strptime(times[1])
as.POSIXct(times, origin="1970-01-01")
times = as.POSIXct(unique(data$ts), origin="1970-01-01")
times
runApp()
dates
times = unique(data$ts)
dates = as.POSIXct(times, origin="1970-01-01")
help("sliderInput")
runApp()
min(dates)
max(dates)
runApp()
runApp()
runApp()
day(dates)
days(dates)
help("as.POSIXct")
dates[1]
dates[1]$year
data
alltimes = as.tbl(dbGetQuery(db,"SELECT * FROM data;"))
alltimes = as.tbl(dbGetQuery(db,"SELECT ts FROM data;"))
alltimes
alltimes = as.tbl(dbGetQuery(db,"SELECT DISTINCT ts FROM data;"))
alltimes
alltimes$ts=floor(alltimes$ts)
alltimes = unique(alltimes$ts)
alltimes
alltimes / 86400
floor(alltimes / 86400)
unique(floor(alltimes / 86400))
unique(floor(alltimes / 86400))*86400
days = as.POSIXct(unique(floor(alltimes / 86400))*86400, origin="1970-01-01")
days
days = format(as.POSIXct(unique(floor(alltimes / 86400))*86400, origin="1970-01-01"),format="%Y-%m-%d")
days
runApp()
data = dbGetQuery(db,'SELECT * FROM data LIMIT 200000;')
db = dbConnect(SQLite(),"../../../Data/Sytadin/data/sytadin_20160404.sqlite3")
data = dbGetQuery(db,'SELECT * FROM data LIMIT 200000;')
data=as.tbl(data)
data$ts=floor(data$ts)
data$id = ((0:(nrow(data)-1))%%148)+1
# load spatial data
library(rgdal)
roads <- readOGR('shiny/gis','troncons')
times = unique(data$ts)
mintps = data %>% group_by(id) %>% summarise(mintps=max(1,min(tps)))
setwd(paste0(Sys.getenv('CS_HOME'),'/TransportationEquilibrium/Models/Visu'))
roads <- readOGR('shiny/gis','troncons')
times = unique(data$ts)
mintps = data %>% group_by(id) %>% summarise(mintps=max(1,min(tps)))
data
strsplit(data$troncon,"=")
library(igraph)
data$troncon
strsplit("P.Maillot(BP)=Orgeval(A13)_[PÃ©agepartiel]","_")
strsplit("P.Maillot(BP)=Orgeval(A13)_[PÃ©agepartiel]","_")[[1]]
strsplit("P.Maillot(BP)=Orgeval(A13)_[PÃ©agepartiel]","_")[[1]][1]
strsplit("  LaCourneuve(A1)=Gennevilliers(A15)","_")[[1]][1]
sapply(data$troncon,function(s){strsplit(strsplit(s,"_")[[1]][1],"=")})
unlist(sapply(data$troncon,function(s){strsplit(strsplit(s,"_")[[1]][1],"=")}))
unlist(sapply(data$troncon[1:148],function(s){strsplit(strsplit(s,"_")[[1]][1],"=")}))
unlist(sapply(data$troncon[1:140],function(s){strsplit(strsplit(s,"_")[[1]][1],"=")}))
grepl(pattern = "^\ *"," test")
grepl(pattern = "^\ *","test")
grepl(pattern = "^\ ","test")
grepl(pattern = "^\ "," test")
grepl(pattern = "^\ ","  test")
lstrip
lstrip<-function(s){res=s;while(grepl(pattern = "^\ ",res));return(res)}
substring("test",2)
lstrip<-function(s){res=s;while(grepl(pattern = "^\ ",res)){res=substring(res,2)};return(res)}
lstrip("    aze")
sapply(unlist(sapply(data$troncon[1:140],function(s){strsplit(strsplit(s,"_")[[1]][1],"=")})),lstrip)
lstrip<-function(s){res=s;while(grepl(pattern = "^\t",res)){res=substring(res,2)};return(res)}
sapply(unlist(sapply(data$troncon[1:140],function(s){strsplit(strsplit(s,"_")[[1]][1],"=")})),lstrip)
grepl("^\ ","  P.Bercy(BP)")
lstrip<-function(s){res=s;while(grepl(pattern = "^\ ",res)){res=substring(res,2)};return(res)}
lstrip("  P.Bercy(BP)")
sapply(data$troncon[1:140],lstrip)
lstrip<-function(s){res=s;while(grepl(pattern = "^\t",res)){res=substring(res,2)};return(res)}
sapply(data$troncon[1:140],lstrip)
substring(...,2)
sapply(data$troncon[1:140],function(s){substring(s,2)})
sapply(data$troncon[1:140],function(s){grepl(pattern = "^\ ",s)})
sapply(data$troncon[1:140],function(s){grepl(pattern = "^\t",s)})
sapply(data$troncon[1:140],function(s){grepl(pattern = "^\ ",s)})
sapply(data$troncon[1:140],function(s){substring(s,1,2)})
sapply(data$troncon[1:140],function(s){substring(s,1,1)})
sapply(data$troncon[1:140],function(s){substring(s,1,1)==" "})
sapply(data$troncon[1:140],function(s){substring(s,1,1)})
sapply(data$troncon[1:140],function(s){grepl(pattern = "^\ ",s)})
sapply(data$troncon[1:140],function(s){grepl(pattern = "^\  ",s)})
sapply(data$troncon[1:140],function(s){grepl(pattern = '^\  ',s)})
trim.leading <- function (x)  sub("^\\s+", "", x)
sapply(data$troncon[1:140],trim.leading)
sapply(unlist(sapply(data$troncon[1:140],function(s){strsplit(strsplit(s,"_")[[1]][1],"=")})),trim.leading)
nodes = sapply(unlist(sapply(data$troncon[1:140],function(s){strsplit(strsplit(s,"_")[[1]][1],"=")})),trim.leading)
length(nodes)
length(unique(nodes))
lstrip <- function (x)  sub("^\\s+", "", x)
nodes = sapply(data$troncon[1:140],function(s){strsplit(strsplit(lstrip(s),"_")[[1]][1],"=")})
nodes
graph_from_edgelist(matrix(unlist(nodes),ncol=2,byrow=TRUE),directed=TRUE)
g=graph_from_edgelist(matrix(unlist(nodes),ncol=2,byrow=TRUE),directed=TRUE)
betweenness(g)
plot(g,layout=layout.fruchterman.reingold)
nodes = sapply(data$troncon[1:140],function(s){strsplit(strsplit(strsplit(lstrip(s),"_")[[1]][1],"(")[[1]][1],"=")})
nodes = sapply(data$troncon[1:140],function(s){strsplit(strsplit(strsplit(lstrip(s),"_")[[1]][1],"\(")[[1]][1],"=")})
nodes = sapply(data$troncon[1:140],function(s){strsplit(strsplit(sub("(","-",strsplit(lstrip(s),"_")[[1]][1]))[[1]][1],"=")})
strsplit("Bonneuil-sur-Marne(N19)","(")
help(strsplit)
nodes = sapply(data$troncon[1:140],function(s){strsplit(strsplit(strsplit(lstrip(s),"_")[[1]][1]),"(",fixed=TRUE)[[1]][1],"=")})
nodes = sapply(data$troncon[1:140],function(s){strsplit(strsplit(strsplit(lstrip(s),"_")[[1]][1],"(",fixed=TRUE)[[1]][1],"=")})
nodes
g=graph_from_edgelist(matrix(unlist(nodes),ncol=2,byrow=TRUE),directed=TRUE)
betweenness(g)
g
plot(g,layout=layout.fruchterman.reingold)
betweenness(g)
length(V(g))
length(E(g))
plot(g,layout=layout.fruchterman.reingold)
nodes
nodes = sapply(data$troncon[1:140],function(s){strsplit(strsplit(lstrip(s),"_")[[1]][1],"=")})
nodes
nodes = unlist(sapply(data$troncon[1:140],function(s){strsplit(strsplit(lstrip(s),"_")[[1]][1],"=")}))
nodes
nodes = sapply(unlist(sapply(data$troncon[1:140],function(s){strsplit(strsplit(lstrip(s),"_")[[1]][1],"=")})),function(s){strsplit(s,"(",fixed=TRUE)[[1]][1]})
nodes
g=graph_from_edgelist(matrix(nodes,ncol=2,byrow=TRUE),directed=TRUE)
betweenness(g)
plot(g,layout=layout.fruchterman.reingold)
plot(g,layout=layout.fruchterman.reingold)
roads@data$id
nodes = sapply(unlist(sapply(data$troncon[roads@data$id],function(s){strsplit(strsplit(lstrip(s),"_")[[1]][1],"=")})),function(s){strsplit(s,"(",fixed=TRUE)[[1]][1]})
g=graph_from_edgelist(matrix(nodes,ncol=2,byrow=TRUE),directed=TRUE)
betweenness(g)
plot(g,layout=layout.fruchterman.reingold)
data.frame(matrix(nodes,ncol=2,byrow=TRUE)
)
g=graph_from_data_frame(data.frame(matrix(nodes,ncol=2,byrow=TRUE)))
i=1
time=times[i]
rtimes = abs(times-time)
time = times[which(rtimes==min(rtimes))]
currentData = data[data$ts==time,]
tps = sapply(currentData$tps,function(x){max(1,x)})
congestion = 1 - (mintps$mintps / tps)
congestion = congestion[roads@data$id]
g=graph_from_data_frame(data.frame(matrix(nodes,ncol=2,byrow=TRUE),congestion=congestion))
g
plot(g,layout=layout.fruchterman.reingold,edge.thickness=congestion)
help("plot.igraph")
plot(g,layout=layout.fruchterman.reingold,edge.size=congestion)
plot(g,layout=layout.fruchterman.reingold,edge.width=congestion)
plot(g,layout=layout.fruchterman.reingold,edge.width=congestion,edge.arrow.mode="-")
plot(g,layout=layout.fruchterman.reingold,edge.width=5*congestion,edge.arrow.mode="-")
plot(g,layout=layout.fruchterman.reingold,edge.width=10*congestion,edge.arrow.mode="-")
runApp('shiny')
plot(g,layout=layout.fruchterman.reingold,edge.width=20*congestion,edge.arrow.mode="-")
E(g)
E(g)$name
E(g)$names
E(g)[1:101]
g
